{"message":"unreachable expression","code":{"code":"unreachable_code","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":3768,"byte_end":3774,"line_start":89,"line_end":89,"column_start":5,"column_end":11,"is_primary":true,"text":[{"text":"    Ok(())","highlight_start":5,"highlight_end":11}],"label":"unreachable expression","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":630,"byte_end":3763,"line_start":21,"line_end":88,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    loop {","highlight_start":5,"highlight_end":11},{"text":"        let nbytes = nic.recv(&mut buf[..])?;","highlight_start":1,"highlight_end":46},{"text":"        // converting the array stream buf from the tun interface into native endian integer","highlight_start":1,"highlight_end":93},{"text":"        // Frame format:","highlight_start":1,"highlight_end":25},{"text":"        //  First 2 bytes: Flags","highlight_start":1,"highlight_end":33},{"text":"        //  Third and Fourth Byte: Proto","highlight_start":1,"highlight_end":41},{"text":"        //  Rest: Raw Protocol (IP, IPV6, etc) frame","highlight_start":1,"highlight_end":53},{"text":"        // let flags = u16::from_be_bytes([buf[0], buf[1]]);","highlight_start":1,"highlight_end":61},{"text":"        // let proto = u16::from_be_bytes([buf[2], buf[3]]); // proto = 0x0800 = IPv4 packet","highlight_start":1,"highlight_end":93},{"text":"        // if proto != 0x0800 {","highlight_start":1,"highlight_end":32},{"text":"        //     // no ipv4","highlight_start":1,"highlight_end":26},{"text":"        //     continue;","highlight_start":1,"highlight_end":25},{"text":"        // }","highlight_start":1,"highlight_end":13},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // Packet format: [   IP Header    |      TCP Header     |     payload    ]","highlight_start":1,"highlight_end":84},{"text":"        match etherparse::Ipv4HeaderSlice::from_slice(&buf[..nbytes]) {","highlight_start":1,"highlight_end":72},{"text":"            Ok(iph) => {","highlight_start":1,"highlight_end":25},{"text":"                let src = iph.source_addr();","highlight_start":1,"highlight_end":45},{"text":"                let dest = iph.destination_addr();","highlight_start":1,"highlight_end":51},{"text":"                let proto = iph.protocol();","highlight_start":1,"highlight_end":44},{"text":"                if proto != 0x06 {","highlight_start":1,"highlight_end":35},{"text":"                    // not tcp","highlight_start":1,"highlight_end":31},{"text":"                    continue;","highlight_start":1,"highlight_end":30},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                // read buf up to nbytes, which is total size of the packet + header","highlight_start":1,"highlight_end":85},{"text":"                match etherparse::TcpHeaderSlice::from_slice(&buf[iph.slice().len()..nbytes]) {","highlight_start":1,"highlight_end":96},{"text":"                    Ok(tcph) => {","highlight_start":1,"highlight_end":34},{"text":"                        use std::collections::hash_map::Entry;","highlight_start":1,"highlight_end":63},{"text":"                        // if we get a packet, we ALWAYS deal with them. assume every port is listening. none CLOSED","highlight_start":1,"highlight_end":117},{"text":"                        // either receive SYN, send an ACK","highlight_start":1,"highlight_end":59},{"text":"                        // either we get closed on other side, or send ACK to establish connection","highlight_start":1,"highlight_end":99},{"text":"                        let data = iph.slice().len() + tcph.slice().len();","highlight_start":1,"highlight_end":75},{"text":"                        //when we get tcp packet","highlight_start":1,"highlight_end":49},{"text":"                        // if already quad, create a reference to state. If not, creates a new one","highlight_start":1,"highlight_end":99},{"text":"                        // a mutable ref to a state","highlight_start":1,"highlight_end":52},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                        match connections.entry(Quad {","highlight_start":1,"highlight_end":55},{"text":"                            src: (src, tcph.source_port()),","highlight_start":1,"highlight_end":60},{"text":"                            dest: (dest, tcph.destination_port()),","highlight_start":1,"highlight_end":67},{"text":"                        }) {","highlight_start":1,"highlight_end":29},{"text":"                            Entry::Occupied(mut c) => {","highlight_start":1,"highlight_end":56},{"text":"                                c.get_mut()","highlight_start":1,"highlight_end":44},{"text":"                                    .on_packet(&mut nic, iph, tcph, &buf[data..nbytes])?;","highlight_start":1,"highlight_end":90},{"text":"                                // point where headers stop to the rest of packet is the content of packet","highlight_start":1,"highlight_end":107},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            Entry::Vacant(e) => {","highlight_start":1,"highlight_end":50},{"text":"                                if let Some(c) = tcp::Connection::accept(","highlight_start":1,"highlight_end":74},{"text":"                                    &mut nic,","highlight_start":1,"highlight_end":46},{"text":"                                    iph,","highlight_start":1,"highlight_end":41},{"text":"                                    tcph,","highlight_start":1,"highlight_end":42},{"text":"                                    &buf[data..nbytes],","highlight_start":1,"highlight_end":56},{"text":"                                )? {","highlight_start":1,"highlight_end":37},{"text":"                                    e.insert(c);","highlight_start":1,"highlight_end":49},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    Err(e) => {","highlight_start":1,"highlight_end":32},{"text":"                        eprintln!(\"ignoring weird tcp packet {:?}\", e);","highlight_start":1,"highlight_end":72},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            Err(e) => {","highlight_start":1,"highlight_end":24},{"text":"                eprintln!(\"ignoring non ipv4 header {:?}\", e);","highlight_start":1,"highlight_end":63},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":"any code following this expression is unreachable","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unreachable_code)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unreachable expression\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:89:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    loop {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let nbytes = nic.recv(&mut buf[..])?;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m23\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        // converting the array stream buf from the tun interface into native endian integer\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        // Frame format:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m87\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m88\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_____-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12many code following this expression is unreachable\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m89\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    Ok(())\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33munreachable expression\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unreachable_code)]` on by default\u001b[0m\n\n"}
{"message":"struct `TcpState` is never constructed","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":92,"byte_end":100,"line_start":6,"line_end":6,"column_start":8,"column_end":16,"is_primary":true,"text":[{"text":"struct TcpState {}","highlight_start":8,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(dead_code)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: struct `TcpState` is never constructed\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:6:8\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mstruct TcpState {}\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(dead_code)]` on by default\u001b[0m\n\n"}
{"message":"2 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 2 warnings emitted\u001b[0m\n\n"}
